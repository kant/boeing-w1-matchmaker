version: '2.1'

services:
 zuul-service:
    build: zuul-apigateway/
    image: zuul-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    container_name: zuul
    network_mode: "host"
    hostname: localhost
    ports:
      - 8092:8092
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"
    
 config-service:
    build: config-service/
    image: config-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8891:8891
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

 eureka-service:
    build: eureka-server/
    image: eureka-server
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    container_name: eureka
    network_mode: "host"
    hostname: localhost
    ports:
      - 9090:9090
    healthcheck:
      test: "exit 0"
 
 zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    container_name: zookeeper
    hostname: localhost
    restart: always
    healthcheck:
      test: "exit 0"

 kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    container_name: kafka
    mem_limit: 1024m
    environment: 
      JAVA_OPTS: "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: localhost:2181
      KAFKA_CREATE_TOPICS: "Location:1:1, Certificates:1:1, Academies:1:1, PersonalInfo:1:1, Experience:1:1, Projects:1:1, 
       Skills:1:1, CassandraRegistration:1:1"
    network_mode: "host"
    hostname: localhost
    depends_on:
      zookeeper:
        condition: service_healthy
    restart: always
    healthcheck:
      test: "exit 0"
  
 mysql:
    image: mysql:5.7
    ports:
      - 3306:3306
    container_name: mysql
    mem_limit: 500m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=register
      - MYSQL_PASSWORD=root
      - MYSQL_USER=root
    network_mode: "host"
    hostname: localhost
    restart: always
    healthcheck:
      test: "exit 0"

 neo4j:
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    container_name: neo4j
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
      - NEO4J_AUTH=neo4j/12345
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_dbms_shell_enabled=true
    volumes:
      - ./plugins:/plugins
      - $HOME/neo4j/data:/data
      - ./import:/import  

 mongodb:
   image: mongo
   container_name: mongodb
   mem_limit: 200m
   environment: 
     - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
   volumes:
     - /my/own/datadir:/data/db
   ports:
     - 27017:27017
   network_mode: "host"
   hostname: localhost
   restart: always
   healthcheck:
     test: "exit 0"
 
 

 user-service:
    build: user-service/
    image: user-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8081:8081
    container_name: user
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0" 

 

 login-service:
    build: login-service/
    image: login-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8082:8082
    container_name: login
    depends_on:
      eureka-service:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: "exit 0"


 experience-service:
    build: experience-microservice/
    image: experience-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8083:8083
    container_name: exp
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

 training-service:
    build: training-microservice/
    image: training-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8084:8084
    container_name: training
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"
  
 qual-service:
    build: qualification-microservice/
    image: qualification-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8085:8085
    container_name: academy
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

 location-service:
    build: location-microservice/
    image: location-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8086:8086
    container_name: location
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

 personalinformation-service:
    build: personalinformation-microservice/
    image: personalinformation-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8087:8087
    container_name: personal
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

 project-service:
    build: project-microservice/
    image: project-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8088:8088
    container_name: project
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

 
 skill-service:
    build: skill-microservice/
    image: skill-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8089:8089
    container_name: skill
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"
 
 downstream-service:
    build: downstream-service/
    image: downstream-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8090:8090
    container_name: downstream
    depends_on:
      eureka-service:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

 index-service:
    build: indexer-microservice/
    image: indexer-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8091:8091
    container_name: indexer
    depends_on:
      eureka-service:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

 nlp-service:
    build: nlp-service/
    image: nlp-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8999:8999
    container_name: nlp
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

 search-service:
    build: search-microservice/
    image: search-service
    restart: always
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 8998:8998
    container_name: search
    depends_on:
      eureka-service:
        condition: service_healthy
    healthcheck:
      test: "exit 0"

   

 angular-app:
    build: Angular-project/
    image: angular
    restart: always
    mem_limit: 1024m
    container_name: Angular
    network_mode: "host"
    hostname: localhost
    ports:
      - 4200:4200
    healthcheck:
      test: "exit 0"   

 autocomplete-service:
    build: autocomplete-microservice/
    image: autocomplete-service
    restart: always
    container_name: autocomplete
    mem_limit: 1024m
    environment: 
      - JAVA_OPTS= "-XX:+UnlockExperimentalVMOptions 
                    -XX:+UseCGroupMemoryLimitForHeap"
    network_mode: "host"
    hostname: localhost
    ports:
      - 6969:6969
    depends_on:
      eureka-service:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: "exit 0"


